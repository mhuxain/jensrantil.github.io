<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jens Rantil's Hideout</title><link href="http://jensrantil.github.io/" rel="alternate"></link><link href="http://jensrantil.github.io/feeds/misc.atom.xml" rel="self"></link><id>http://jensrantil.github.io/</id><updated>2013-05-19T21:25:00+02:00</updated><entry><title>Migrating to Python 3</title><link href="http://jensrantil.github.io/migrating-to-python-3.html" rel="alternate"></link><updated>2013-05-19T21:25:00+02:00</updated><author><name>Jens Rantil</name></author><id>tag:jensrantil.github.io,2013-05-19:migrating-to-python-3.html</id><summary type="html">&lt;p&gt;This post is partially related to my &lt;a class="reference external" href="http://jensrantil.github.io/cqrs-time-to-rewind.html"&gt;previous blog post&lt;/a&gt; about
&lt;a class="reference external" href="http://www.github.com/JensRantil/rewind"&gt;Rewind&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I initially started the implementation of Rewind in Python 2.7. I
constantly kept test coverage to 100%, and I tried to stick to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt; as
much as possible.  The Python testing tool &lt;a class="reference external" href="https://nose.readthedocs.org/en/latest/"&gt;Nose&lt;/a&gt; proved to be very
valuable, as did &lt;a class="reference external" href="https://travis-ci.org/JensRantil/rewind"&gt;Travis CI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After some time I thought &amp;quot;Hey, why work in Python 2 when Python 3 seems
around corner?&amp;quot;. I installed Python 3.2 on my laptop and started
executing those tests. Travis CI helped a lot here to always make sure
that Rewind was backward compatible with Python 2.7. Ever nervous about
a test failing? Make pull request on &lt;a class="reference external" href="http://www.github.com"&gt;Github&lt;/a&gt; and Travis CI will tell you
whether the pull request broke something or not. Highly convenient.
Migration to Python 3 can be summarized in three paragraphs:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Migrate from lists to iterators.&lt;/strong&gt; In many ways I like the changes to the
built-in functions &lt;tt class="docutils literal"&gt;map&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;reduce&lt;/tt&gt;. Working with iterators are in
many ways a higher abstraction. I did have some code that expected these
functions to return lists. The flip side was that I sometimes had to
wrap in list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;someiter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In hindsight, I probably should have used &lt;a class="reference external" href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions"&gt;list comprehensions&lt;/a&gt; for
many of those cases as they are more readable...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use the 'bytes' type instead of 'string' where appropriate.&lt;/strong&gt;
&lt;tt class="docutils literal"&gt;bytes&lt;/tt&gt; was introduced as a new type in Python 3. In the Rewind case,
this mostly involved ZeroMQ message frames handling, that takes
&lt;tt class="docutils literal"&gt;bytes&lt;/tt&gt;. This also involved some conversion to and/or from &lt;tt class="docutils literal"&gt;bytes&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;string&lt;/tt&gt;. I tried to stick to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;UTF-8&lt;/span&gt;&lt;/tt&gt; for this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use 'string.format(...)' instead of 'string % ...' pattern.&lt;/strong&gt; Nuff
said.&lt;/p&gt;
&lt;div class="section" id="looking-back"&gt;
&lt;h2&gt;Looking back&lt;/h2&gt;
&lt;p&gt;In general, Python 3 is very backwards compatible (but Python 2 is not
forward compatible). As far as I can recollect, the only conditionals I
needed to make Python3 were aliasing of imports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Python &amp;lt; 3&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ConfigParser&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Python &amp;gt;= 3&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Bootstrapping software projects</title><link href="http://jensrantil.github.io/bootstrapping-software-projects.html" rel="alternate"></link><updated>2013-05-19T21:22:00+02:00</updated><author><name>Jens Rantil</name></author><id>tag:jensrantil.github.io,2013-05-19:bootstrapping-software-projects.html</id><summary type="html">&lt;p&gt;This post is partially related to my &lt;a class="reference external" href="http://jensrantil.github.io/cqrs-time-to-rewind.html"&gt;previous blog post&lt;/a&gt; about
&lt;a class="reference external" href="http://www.github.com/JensRantil/rewind"&gt;Rewind&lt;/a&gt; and &lt;a class="reference external" href="http://www.github.com/JensRantil/gorewind"&gt;GoRewind&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Even though I've been working as a full-time developer for the past 4-5
years, it still hits me how much boiler plate is required to create a
proper software project. In fact, I've seen so many times how extra
functionality is bundled into applications just because the alternative
would require many hours of setting things up. This despite the fact
that functionality is orthogonal and has totally different life cycles.&lt;/p&gt;
&lt;p&gt;Some of the things I'm thinking about are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Choosing a license and making sure that it is published correctly.
That is, included in all source files, including my snail mail address
etc. I even wrote a &lt;a class="reference external" href="https://github.com/JensRantil/rewind/blob/develop/rewind/server/test/test_code.py#L80"&gt;test for this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For Python projects; setting up a proper &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file. This also
includes a bunch of reading figuring out why &lt;a class="reference external" href="https://pypi.python.org/pypi/distribute"&gt;Distribute&lt;/a&gt; should be
used instead of &lt;a class="reference external" href="https://pypi.python.org/pypi/setuptools"&gt;Setuptools&lt;/a&gt;. Not to mention understanding entry
points, test dependencies and publishing to &lt;a class="reference external" href="https://pypi.python.org/pypi"&gt;PyPi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For other projects; setting up a proper build system [3], figure out how
to run tests, bundle and distribute things etc.&lt;/li&gt;
&lt;li&gt;Choosing a testing platform. In my case &lt;a class="reference external" href="http://readthedocs.ord/docs/nose/"&gt;Nose&lt;/a&gt; proved to be a great
choice.&lt;/li&gt;
&lt;li&gt;Choosing a coding standard. I was tired of messing around in
undocumented code with mixed types of indentation. Both &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; and
&lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0257/"&gt;PEP257&lt;/a&gt; proved invaluable. In fact, I took things to a new level and
created &lt;a class="reference external" href="https://github.com/JensRantil/rewind/blob/develop/rewind/server/test/test_code.py"&gt;coding standards tests&lt;/a&gt; that asserted all code adhered to
these two PEPs. It used the &lt;a class="reference external" href="https://github.com/jcrocholl/pep8"&gt;pep8&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/GreenSteam/pep257"&gt;pep257&lt;/a&gt; projects' APIs for this.  It
may sound too strict, but the fact is, it was wonderful to have these
automatically tested! Also, the fact that &lt;a class="reference external" href="http://golang.org"&gt;Go&lt;/a&gt; comes with &lt;a class="reference external" href="http://golang.org/cmd/go/#hdr-Run_gofmt_on_package_sources"&gt;its own
formatter&lt;/a&gt; has proven to me that it's a valuable direction to go.&lt;/li&gt;
&lt;li&gt;Choosing &lt;a class="reference external" href="http://semver.org/"&gt;versioning strategy&lt;/a&gt; and figuring out a &lt;a class="reference external" href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;branching model&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[3]&lt;/td&gt;&lt;td&gt;Maven, make, grails, you name it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Open Source projects also involves building a community; mailing lists,
contribution processes etc.&lt;/p&gt;
&lt;p&gt;It takes time to set things up. And it's surprising that we, the
Software Community haven't come further with some of these obstacles.&lt;/p&gt;
</summary><category term="software"></category><category term="bootstrapping"></category></entry><entry><title>CQRS - Time to Rewind</title><link href="http://jensrantil.github.io/cqrs-time-to-rewind.html" rel="alternate"></link><updated>2013-05-19T21:21:00+02:00</updated><author><name>Jens Rantil</name></author><id>tag:jensrantil.github.io,2013-05-19:cqrs-time-to-rewind.html</id><summary type="html">&lt;p&gt;For the last year I've been thinking a lot about &lt;a class="reference external" href="http://www.cqrsinfo.com"&gt;CQRS&lt;/a&gt; [&lt;a class="reference external" href="http://martinfowler.com/bliki/CQRS.html"&gt;1&lt;/a&gt;], &lt;a class="reference external" href="http://martinfowler.com/eaaDev/EventSourcing.html"&gt;Event
Sourcing&lt;/a&gt; and distributed architecture using &lt;a class="reference external" href="http://www.zeromq.org"&gt;ZeroMQ&lt;/a&gt;. I first stumbled
across the concept of CQRS through the mailing list for a &lt;a class="reference external" href="http://www.meetup.com/SoftPub/"&gt;nerd meetup
in Helsingborg&lt;/a&gt;, Sweden. This led me to a lot of CQRS &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/jj554200.aspx"&gt;reading&lt;/a&gt; and
&lt;a class="reference external" href="http://cqrs.wordpress.com/video/"&gt;videos&lt;/a&gt;, and with that the Event Sourcing data model.&lt;/p&gt;
&lt;p&gt;To try out CQRS and Event Sourcing in practise, I started writing an
open source event store about a year ago. I named it &lt;a class="reference external" href="http://www.github.com/JensRantil/rewind"&gt;Rewind&lt;/a&gt;. This also
opened up for me to try some concepts that I had never tried before [2].&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;See below.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="cqrs-and-event-sourcing"&gt;
&lt;h2&gt;CQRS and Event Sourcing&lt;/h2&gt;
&lt;p&gt;But first, let's Rewind ;). Rewind's &lt;a class="reference external" href="https://github.com/JensRantil/rewind/blob/develop/README.rst"&gt;README&lt;/a&gt; does a fairly good job at an
elevator speech for &lt;em&gt;CQRS&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Have you ever been nervous of all those DBMSs schema changes when
you are deploying your applications? They are gonna take too long,
or break backward compatibility? Have you ever thought &amp;quot;Crap, I wish
I had stored that information since earlier&amp;quot;? Have you ever felt
your writing patterns and your reading patterns differ a lot, making
things harder to scale? Issues like these can be solved using &lt;em&gt;CQRS&lt;/em&gt;
and &lt;em&gt;event sourcing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;CQRS&lt;/em&gt; (Command-Query Response Segregation) is an architectural pattern
that aims to solve these issues by splitting up your architectural
system into two parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A &lt;em&gt;write side&lt;/em&gt; that takes care of validating input and optimizes
for fast writes. The write side takes commands and outputs
corresponding events if the command validates correctly.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;read side&lt;/em&gt; that listens to incoming events from the write side.
The read side is optimized for fast reads and incrementally build
up state that can be queried fast.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While not required, it is common to use messaging between the
write and read sides. This means that the system will be in an
inconsistent state from time to time. This is usually not an issue
and came be overcome in various ways.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A couple of additional things to note about CQRS:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;As I see it, it is the architectural equivalent of &lt;cite&gt;the CQS design
pattern&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;It is a pattern that decouples systems very well. This can have huge
implications when it comes to testability.&lt;/li&gt;
&lt;li&gt;It's also worth noting that there are some similarities between Domain
Driven Design (&lt;a class="reference external" href="http://www.wikipedia.org/Domain-driven_design"&gt;DDD&lt;/a&gt;) and CQRS. Most vocabularies in DDD are used in
CQRS; ubiquous language, aggregates, aggregrate root, value objects,
bounded contexts etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The README then states about &lt;em&gt;Event Sourcing&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A common pattern used together with CQRS is &lt;em&gt;event sourcing&lt;/em&gt;. The
concept can be summarized as using state changes as primary
persistence, instead of the final state. The state changes are
called &lt;em&gt;events&lt;/em&gt; and they are generated by the write side and
delivered to the read side.&lt;/p&gt;
&lt;p&gt;The events are persisted in an event store that sits inbetween the
read and write side of things. It takes care of three things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;persisting all events to disk.&lt;/li&gt;
&lt;li&gt;being a hub/broker replicating all events from the write to the
read side of things.&lt;/li&gt;
&lt;li&gt;allowind fast querying of events so that different parts of the
system can be synced back on track and new components can be
brought back in play.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;Rewind&lt;/h2&gt;
&lt;p&gt;Question was, how would a CQRS/event sourced system behave in
production?  Could it scale out? Could writes be partitioned? What about
fault tolerance? I was tired of heavy database schema changes, I wanted
a nouvaeu way of testing and question some of the common practices.&lt;/p&gt;
&lt;p&gt;Enter &lt;a class="reference external" href="http://www.github.com/JensRantil/rewind"&gt;Rewind&lt;/a&gt;; Rewind was my pet project for a &lt;a class="reference external" href="https://github.com/JensRantil/rewind/graphs/commit-activity"&gt;major part of 2012&lt;/a&gt;. It
was &lt;em&gt;a Python implementation of an event store that supported multiple
backends&lt;/em&gt;. It really gave me an opportunity to try everything I wanted.&lt;/p&gt;
&lt;p&gt;The development of Rewind halted at the beginning of 2013. From thereon,
I instead used the lessons I had learnt and rewrote Rewind's
functionality in &lt;a class="reference external" href="http://www.golang.org"&gt;Go&lt;/a&gt;. The project was named &lt;a class="reference external" href="https://www.github.com/JensRantil/gorewind"&gt;GoRewind&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Within the next couple of blog posts I plan to write about what I've
learnt from these two projects; design decisions, testability, ZeroMQ,
developing in Go among other things.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="cqrs"></category><category term="distributed-architecture"></category></entry><entry><title>That initial blogpost</title><link href="http://jensrantil.github.io/that-initial-blogpost.html" rel="alternate"></link><updated>2013-05-14T22:40:00+02:00</updated><author><name>Jens Rantil</name></author><id>tag:jensrantil.github.io,2013-05-14:that-initial-blogpost.html</id><summary type="html">&lt;p&gt;So it's time to kick off this blog. I cheated a little and posted
&lt;a class="reference external" href="http://jensrantil.github.io/replacing-a-folder-in-subversion.html"&gt;a previously written blog post&lt;/a&gt;.
It was posted on a personal blog that mostly had Swedish material.&lt;/p&gt;
&lt;p&gt;My intent with this blog will be to &amp;quot;put a URL on my tech and
possibly entrepreneurship thoughts, in English&amp;quot;. If you'd like to know
more about me, check out that brand new &lt;a class="reference external" href="http://jensrantil.github.io/pages/about-jens.html"&gt;About Me&lt;/a&gt; page!&lt;/p&gt;
</summary></entry><entry><title>Replacing a folder in Subversion</title><link href="http://jensrantil.github.io/replacing-a-folder-in-subversion.html" rel="alternate"></link><updated>2008-09-22T02:17:00+02:00</updated><author><name>Jens Rantil</name></author><id>tag:jensrantil.github.io,2008-09-22:replacing-a-folder-in-subversion.html</id><summary type="html">&lt;p&gt;So you have an external library foo version 1.0 that you have committed
to your Subversion repository together with your code. Let us for
simplicity say that your external library is situated in its own folder.&lt;/p&gt;
&lt;p&gt;One day you realize that there is a new version 2.0 of foo released. You
download it and since there was a while ago a lot of the file structure
in the foo project has changed. How can you replace the files in your
current repository in a good looking fashion?&lt;/p&gt;
&lt;p&gt;Now you could remove the old foo-library. Commit, and import the new
version of foo. But for me I always think it's important that a commit
is correctly reflecting a change. And I would say that upgrading the foo
library should be done in ONE commit. How do you do this? It turns out
it's a pretty hard problem and something that does not exist in todays
Subversion.&lt;/p&gt;
&lt;p&gt;I solved this by running &lt;tt class="docutils literal"&gt;rsync&lt;/tt&gt; from the new library folder to the old
library folder, ignoring the &lt;tt class="docutils literal"&gt;.svn&lt;/tt&gt;-folders:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rsync -vlr --exclude&lt;span class="o"&gt;=&lt;/span&gt;.svn --delete foo_new/ foo_old/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Executing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;svn status
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then gave a me a list of all newly added files (question marks), removed
files (conflicts/exclamation marks) and changed files (M, as in
modified). The added files and removed files then manually had to be
added/removed in my local checkout before committing - something that
could have been scripted if I wasn't doing this at 2:30 in the morning
:-)&lt;/p&gt;
&lt;p&gt;Please comment if you do have a better solution.&lt;/p&gt;
</summary><category term="svn"></category><category term="subversion"></category></entry></feed>